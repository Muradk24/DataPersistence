// Generated by view binder compiler. Do not edit!
package edu.farmingdale.alrajab.bcs421.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import edu.farmingdale.alrajab.bcs421.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFileBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText enterValue;

  @NonNull
  public final Button goBackBtn;

  @NonNull
  public final Button readFromFile;

  @NonNull
  public final TextView textOfFile;

  @NonNull
  public final Button writeToFile;

  private ActivityFileBinding(@NonNull LinearLayout rootView, @NonNull EditText enterValue,
      @NonNull Button goBackBtn, @NonNull Button readFromFile, @NonNull TextView textOfFile,
      @NonNull Button writeToFile) {
    this.rootView = rootView;
    this.enterValue = enterValue;
    this.goBackBtn = goBackBtn;
    this.readFromFile = readFromFile;
    this.textOfFile = textOfFile;
    this.writeToFile = writeToFile;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_file, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.enter_value;
      EditText enterValue = ViewBindings.findChildViewById(rootView, id);
      if (enterValue == null) {
        break missingId;
      }

      id = R.id.go_back_btn;
      Button goBackBtn = ViewBindings.findChildViewById(rootView, id);
      if (goBackBtn == null) {
        break missingId;
      }

      id = R.id.read_from_file;
      Button readFromFile = ViewBindings.findChildViewById(rootView, id);
      if (readFromFile == null) {
        break missingId;
      }

      id = R.id.text_of_file;
      TextView textOfFile = ViewBindings.findChildViewById(rootView, id);
      if (textOfFile == null) {
        break missingId;
      }

      id = R.id.write_to_file;
      Button writeToFile = ViewBindings.findChildViewById(rootView, id);
      if (writeToFile == null) {
        break missingId;
      }

      return new ActivityFileBinding((LinearLayout) rootView, enterValue, goBackBtn, readFromFile,
          textOfFile, writeToFile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
